[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JedR Academy",
    "section": "",
    "text": "“Always pass on what you have learned.” – Yoda\n\n\n\nTo be clear, this isn’t a package. It’s some training material. Here is a list of released lessons.\nThis project is a series of learnr interactive tutorials designed to develop and improve R skills with a heavy lean on the tidyverse. There are two main goals:\n\nTo focus tutorials on feats of skill or tasks to accomplish instead of on specific packages or functions.\nTo use the same data whenever possible to avoid the cognitive load of learning new data for each example.\n\nThere are two types of lessons:\n\nJedR Training: Tutorials focused on feats of skills instead of on specific packages. For instance, “How to manage dates” vs “How to use lubridate.”\nJedR Trials: Short tests over specific skills. These trials are used by students in our J 327D Reporting with Data class.\n\nJedR Padawans can download the repo and run each notebook on their local machines. The notebooks are stored in the training/ and trials/ folders. All notebooks require tidyverse, learnr and gradethis. Some notebooks might require additional packages.\nOnce you open a notebook, use the Run Document option.\n\n\n\nRun Document\n\n\n\n\n\nWhile we strive to use the starwars data as much as possible, we’ve had to introduce other Star Wars related data in some situations.\nAll data is in the data/ folder except starwars which is utilized from tidyverse.\n\nstarwars characters data that is part of the tidyverse. It’s our main data set. Small enough to wrap your head around; complex and dirty enough to provide good examples.\nstarwarsrebels is a list of episodes of Star Wars Rebels from tvmaze.com\n\n\n\nThese might be explored later.\n\nSWAPI\nStar Wars Databank\nWe’ve pulled some data from Kaggle, which notes “This data was gathered using the Star Wars API that is no longer available. The origin of the data is The Star Wars Wiki.”\n\ncharacters\nplanets\nspecies\nstarships\nvehicles\n\nFound some additional data on data.world that yielded a couple new sets:\n\nsurvey (done from Five Thirty Eight, apparently)\nprinciples\nsoundtracks\nrt_ratings\nimdb_ratings\n\n\n\n\n\n\nThis project was the brainchild of Christian McDonald, associate professor of practice at the School of Journalism and Media at the University of Texas at Austin. He began collaborating soon thereafter with Dr. Jo Lukito, an assistant professor also at UT JaM.\nOther contributors include:\n\nChristian Overgaard, Doctoral student. He helped think through the project and wrote the “Managing dates” tutorial.\nTamara Rodriguez designed our JedR hex logo."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "JedR Academy",
    "section": "Overview",
    "text": "Overview\nTo be clear, this isn’t a package. It’s some training material. Here is a list of released lessons.\nThis project is a series of learnr interactive tutorials designed to develop and improve R skills with a heavy lean on the tidyverse. There are two main goals:\n\nTo focus tutorials on feats of skill or tasks to accomplish instead of on specific packages or functions.\nTo use the same data whenever possible to avoid the cognitive load of learning new data for each example.\n\nThere are two types of lessons:\n\nJedR Training: Tutorials focused on feats of skills instead of on specific packages. For instance, “How to manage dates” vs “How to use lubridate.”\nJedR Trials: Short tests over specific skills. These trials are used by students in our J 327D Reporting with Data class.\n\nJedR Padawans can download the repo and run each notebook on their local machines. The notebooks are stored in the training/ and trials/ folders. All notebooks require tidyverse, learnr and gradethis. Some notebooks might require additional packages.\nOnce you open a notebook, use the Run Document option.\n\n\n\nRun Document",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#jedr-training",
    "href": "index.html#jedr-training",
    "title": "JedR Academy",
    "section": "",
    "text": "Recoding values: When you need to rename values in your data, perhaps to create a new categorization schema.\nManaging dates: When you need help parsing dates or making useful date parts for grouping."
  },
  {
    "objectID": "index.html#jedr-trials",
    "href": "index.html#jedr-trials",
    "title": "JedR Academy",
    "section": "",
    "text": "Introduction: Introduces the starwars data and the interactive format of the lessons. Covers some basic functions to look at data.\nSummarize with Count: Covers counting rows using group_by and summarize. (We skip count() here to focus on group_by, summarize and arrange.)\nSummarize with Math: Covers grouping data and math functions within summarize.\nPlotting: Making a very basic ggplot chart.\nPivoting: Making data wider and longer.\nBind and Join: Combining data.\n\n\n\nThis is a work in progress. We have a list of ideas and would be consider additions that follow our philosophy (which is admittedly also under development)."
  },
  {
    "objectID": "index.html#data-sources",
    "href": "index.html#data-sources",
    "title": "JedR Academy",
    "section": "Data sources",
    "text": "Data sources\nWhile we strive to use the starwars data as much as possible, we’ve had to introduce other Star Wars related data in some situations.\nAll data is in the data/ folder except starwars which is utilized from tidyverse.\n\nstarwars characters data that is part of the tidyverse. It’s our main data set. Small enough to wrap your head around; complex and dirty enough to provide good examples.\nstarwarsrebels is a list of episodes of Star Wars Rebels from tvmaze.com\n\n\nOther possible data sources\nThese might be explored later.\n\nSWAPI\nStar Wars Databank\nWe’ve pulled some data from Kaggle, which notes “This data was gathered using the Star Wars API that is no longer available. The origin of the data is The Star Wars Wiki.”\n\ncharacters\nplanets\nspecies\nstarships\nvehicles\n\nFound some additional data on data.world that yielded a couple new sets:\n\nsurvey (done from Five Thirty Eight, apparently)\nprinciples\nsoundtracks\nrt_ratings\nimdb_ratings",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "JedR Academy",
    "section": "Credits",
    "text": "Credits\nThis project was the brainchild of Christian McDonald, associate professor of practice at the School of Journalism and Media at the University of Texas at Austin. He began collaborating soon thereafter with Dr. Jo Lukito, an assistant professor also at UT JaM.\nOther contributors include:\n\nChristian Overgaard, Doctoral student. He helped think through the project and wrote the “Managing dates” tutorial.\nTamara Rodriguez designed our JedR hex logo.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "resources/github.html",
    "href": "resources/github.html",
    "title": "Using git & Github",
    "section": "",
    "text": "The purpose of this bootcamp lesson is to fill gaps that my students might have before they can successfully contribute to this project. It might serve best as pointers to existing documentation for certain skills, but then explanations of how they fit into our workflow.",
    "crumbs": [
      "Resources",
      "Using git & Github"
    ]
  },
  {
    "objectID": "resources/github.html#prerequisites",
    "href": "resources/github.html#prerequisites",
    "title": "Using git & Github",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nTerminal: If you are not familiar with using a Terminal at all, then there is a chapter in Intro to Coding for Journalists that might be a good first look. FreeCodeCamp has a Command Line for Beginners that is more detailed than what we need here.\nInstalling Git: Chapters 2.1 through 2.5 of ICJ Setting Up handle installing git and configuring ssh keys, which I think is worth doing. If you already have git and Github and know how to use them, you are good.\nUsing Git: There is a section in Intro to Coding for Journalists on how to use Git in the context of that class. The basics apply here, as well.",
    "crumbs": [
      "Resources",
      "Using git & Github"
    ]
  },
  {
    "objectID": "resources/github.html#clone-the-repo",
    "href": "resources/github.html#clone-the-repo",
    "title": "Using git & Github",
    "section": "Clone the repo",
    "text": "Clone the repo\nTo get the jedr-academy repo on your computer and be able to contribute to its code, you have to clone the repo. This downloads a copy of the code and it’s history to your computer.\n\nDO NOT create a project folder in advance! You’ll get one when you clone.\nLaunch Terminal and use cd to get to the directory where you to download the code to.\nDo git clone git@github.com:utdata/jedr-academy.git to download the repo and it’s commit history.\nNow you can close Terminal and open the project in RStudio.\n\nYou only have to do this once.",
    "crumbs": [
      "Resources",
      "Using git & Github"
    ]
  },
  {
    "objectID": "resources/github.html#branches",
    "href": "resources/github.html#branches",
    "title": "Using git & Github",
    "section": "Branches",
    "text": "Branches\nThe Way to contribute to JedR is to use a git branch. &lt;= Read that tutorial to get an idea how they work.\n\nWith your project open in RStudio, go to the Terminal within RStudio.\nDo git checkout -b new-branch but use a more descriptive name than “new-branch”, like “pivoting-tutorial”. The name should be slug-friendly: all lowercase, words connected with dashes.\nDo git branch to double-check which branch are on.\n\nAt this point, you are working on YOUR copy of the code. You can experiment, add and commit code at will. You can push the code to Github in your branch with …\ngit push origin new-branch\n… but with your branch name.\nDo know if you edit existing files on your local branch that also get edited by others, then we will have to resolve any conflicts. That’s fine, but can be complicated. Just reach out to Christian for help.\n\nPull requests\nWhen you are done with your changes and want to merge them into the default branch, let Christian know via email and he’ll create a Pull Request. If you want to learn more about that, then request to do it together and he’ll explain it.\nThe pull request process compares the new code to the existing code and notes any conflicts, which have to be “resolved” before the branches can be merged.",
    "crumbs": [
      "Resources",
      "Using git & Github"
    ]
  },
  {
    "objectID": "resources/github.html#switching-between-branches",
    "href": "resources/github.html#switching-between-branches",
    "title": "Using git & Github",
    "section": "Switching between branches",
    "text": "Switching between branches\nNow that you are working on a code base that others might be working on, you have to “git pull” as well as “git push”.\nSome things to consider:\n\nIf you are going to switch branches (like from your own feature branch back to main), then you want to commit (or stash) your current changes first.\ngit checkout branch-name will check out that branch on your local machine.\ngit pull origin branch-name will pull the latest version from the Github down to your computer. This is especially important if you are checking out a branch that others have worked on, like main.",
    "crumbs": [
      "Resources",
      "Using git & Github"
    ]
  },
  {
    "objectID": "resources/learnr.html",
    "href": "resources/learnr.html",
    "title": "Learning learnr",
    "section": "",
    "text": "Our goal here is to introduce packages used within the JedR Academy. It mostly points to other resources with some description with how the link might fit into our workflow.\nlearnr is the package that allows us to create interactive code in a browser. We are also using shinyapps to publish our interactive files on the web.\nBefore working on any code, make sure you are in a clone of the repo in your own branch.",
    "crumbs": [
      "Resources",
      "Learning learnr"
    ]
  },
  {
    "objectID": "resources/learnr.html#learnr",
    "href": "resources/learnr.html#learnr",
    "title": "Learning learnr",
    "section": "learnr",
    "text": "learnr\nProbably the best way to learn learnr is to scan the documentation, look through some examples and then start building your own.\n\nStart with the learnr package site. Look through one of the examples on that page, along with the code that created it.\nGo through the interactive exercises and interative questions pages.\nLook through some examples in this repo, like trials/jedr-trial-01-intro.Rmd and training/jedr-categorization.Rmd.\nPick an idea from this list and start working on it, in the proper folder.",
    "crumbs": [
      "Resources",
      "Learning learnr"
    ]
  },
  {
    "objectID": "resources/learnr.html#structure-and-style",
    "href": "resources/learnr.html#structure-and-style",
    "title": "Learning learnr",
    "section": "Structure and style",
    "text": "Structure and style\n\nA Trial is little test for folks to practice a new skill. Look at the files in the trails folders for examples to follow. They should be short and focused, with enough hints to help ensure student success. They don’t have to pair with a tutorial, but it would be nice. These should be saved in the trails folder.\nA Training is a more involved tutorial designed to teach a new skill using familiar data sets, with some fun thrown in. To get an idea of how they work, do the Categorization tutorial to see and experience the style. Then look through the code of that file training/jedr-categorization.Rmd as an example. These should be saved in the training folder.",
    "crumbs": [
      "Resources",
      "Learning learnr"
    ]
  },
  {
    "objectID": "resources/learnr.html#publishing-to-the-web",
    "href": "resources/learnr.html#publishing-to-the-web",
    "title": "Learning learnr",
    "section": "Publishing to the web",
    "text": "Publishing to the web\nProfessor McDonald will handle publishing and linking to any new interactives. When you are ready for that, talk to him.",
    "crumbs": [
      "Resources",
      "Learning learnr"
    ]
  },
  {
    "objectID": "resources/links.html",
    "href": "resources/links.html",
    "title": "List of lessons",
    "section": "",
    "text": "Links go to online version. Locally-runnable files are in the training/ folder.\n\nCategorization: When you need to rename values in your data, perhaps to create a new categorization schema.\nManage dates: When you need help parsing dates or making useful date parts for grouping.",
    "crumbs": [
      "Links"
    ]
  },
  {
    "objectID": "resources/links.html#jedr-training",
    "href": "resources/links.html#jedr-training",
    "title": "List of lessons",
    "section": "",
    "text": "Links go to online version. Locally-runnable files are in the training/ folder.\n\nCategorization: When you need to rename values in your data, perhaps to create a new categorization schema.\nManage dates: When you need help parsing dates or making useful date parts for grouping.",
    "crumbs": [
      "Links"
    ]
  },
  {
    "objectID": "resources/links.html#jedr-trials",
    "href": "resources/links.html#jedr-trials",
    "title": "List of lessons",
    "section": "JedR Trials",
    "text": "JedR Trials\nLinks go to online version. Locally-runnable files are in the trails/ folder.\n\nIntroduction: Introduces the starwars data and the interactive format of the lessons. Covers some basic functions to look at data.\nSummarize with Count: Covers counting rows using group_by and summarize. (We skip count() here to focus on group_by, summarize and arrange.)\nSummarize with Math: Covers grouping data and math functions within summarize.\nPlotting: Making a very basic ggplot chart.\nPivoting: Making data wider and longer.\nBind and Join: Combining data.",
    "crumbs": [
      "Links"
    ]
  },
  {
    "objectID": "resources/links.html#others-to-come",
    "href": "resources/links.html#others-to-come",
    "title": "List of lessons",
    "section": "Others to come?",
    "text": "Others to come?\nThis is a work in progress. We have a list of ideas and would be consider additions that follow our philosophy (which is admittedly also under development).",
    "crumbs": [
      "Links"
    ]
  },
  {
    "objectID": "training/jedr-categorization.html#how-to-make-categories-from-data",
    "href": "training/jedr-categorization.html#how-to-make-categories-from-data",
    "title": "JedR: Categorization",
    "section": "How to make categories from data",
    "text": "How to make categories from data\nWelcome Padawan. May your quest to become a JedR Master be fruitful. “Do or do not. There is no try.”\nSometimes as journalists (or data scientists) we need to create new categories for our data. An example might be where we have a column of data that has too many different values to plot effectively. We might be able to re-categorize those values to fewer individual choices, maybe combining less important values into a generic term like “other”.\nSome real-worldish examples:\n\nYou want to show race/ethnicity breakdowns in a chart or story about Hispanic representation. There are eight different values and some are quite small. You might create a column to use the values Asian, Black, Hispanic and White with all others changed to “Other”.\nPerhaps you are doing a story on crime and want to highlight violent crimes vs property vs other crimes. You might create a new column that categorizes many individual charges into these buckets.\n\nWe’re taking records and putting them into piles or groups based on one or more values.\n\nJedR Mind Trick: When we categorize values like this, we want to create a new column intead of overwriting an existing one. This way you can check your work. You can always remove or rename columns later.\n\n\nGoals of this training session\n\nTo apply case_match() within a mutate() to create data categories. It’s a one-to-one match, for the most part.\nTo apply case_when() within a mutate() to create data categories. This allows more complex logic."
  },
  {
    "objectID": "training/jedr-categorization.html#our-scenario",
    "href": "training/jedr-categorization.html#our-scenario",
    "title": "JedR: Categorization",
    "section": "Our scenario",
    "text": "Our scenario\nHere at the Galactic News Hub, we have a dataset of all the sources we connect with on a regular basis: The starwars data set that comes with the tidyverse library.\n\nlibrary(tidyverse)\nstarwars\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nThis data includes a variable called species, and our editor wants a report breaking down the species of our source list based on three broad categories: human, droid, and other. Our editor is hoping we can later cross reference these categories against gender and other variables within the source list.\nTo accomplish this, it would be helpful to have a “species_category” variable using these three values so we can group and aggregate with other columns.\nLet’s take a look at the species column using count().\n\nstarwars %&gt;% count(species, sort = TRUE, name = \"cnt\")\n\n# A tibble: 38 × 2\n   species    cnt\n   &lt;chr&gt;    &lt;int&gt;\n 1 Human       35\n 2 Droid        6\n 3 &lt;NA&gt;         4\n 4 Gungan       3\n 5 Kaminoan     2\n 6 Mirialan     2\n 7 Twi'lek      2\n 8 Wookiee      2\n 9 Zabrak       2\n10 Aleena       1\n# ℹ 28 more rows\n\n\nYou can see that Human and Droid values dominate the data. The next most frequent values is NA. Maybe we can convince our editor to make that category Other/Unknown."
  },
  {
    "objectID": "training/jedr-categorization.html#using-case_match",
    "href": "training/jedr-categorization.html#using-case_match",
    "title": "JedR: Categorization",
    "section": "Using case_match()",
    "text": "Using case_match()\nOne of the easier methods to categorize data is to use case_match(). The logic is straighforward: For this value, substitute that value.\nTo make clear our goal here for the Galactic Hub News: We want to create a new column called species_category that has three values: Human, Droid, Other/Unknown. And they need to be based on the existing species variable.\n\nHow case_match works\nWhile is is possible to recatagorize our values into the same column, a good JedR will instead use mutate() and case_when() to create a new column and then filling it with the results.\ndata %&gt;% \n  mutate(\n    new_column = case_when(\n      existing_column,\n      \"Old Value 1 from existing_column\" ~ \"New Value 1\",\n      \"Old Value 2 from existing_column\" ~ \"New Value 2\",\n      .default = \"Value for everything else\"\n    )\n  )\n\nThis is standard usage for the mutate() function … you create the new column and then set it to a value. In this case, we are setting the value to the result of the case_when() function.\nWithin case_when(), we have to first name the column we are pulling from. Like where are we looking for these values?\nThen we have a series of statements separated with ~. If we find what is on the left-hand side, then we change it to what is on the right side.\nLastly we have a “default” to handle everything else we haven’t specified. In some cases you night make this .default = existing_column to keep the existing value for those rows.\n\nThe order you put these is important. Once a match has been found and updated, that value won’t be changed again.\nSo, with our starwars data, a partial solution might look like this:\n\nstarwars %&gt;% \n  mutate(\n    species_category = case_match(\n      species,\n      \"Gungan\" ~ \"Other/Unknown\",\n      \"Neimodian\" ~ \"Other/Unknown\"\n    )\n  ) %&gt;% # using select and slice to focus on the change\n  select(name, species, species_category) %&gt;% slice(31:40)\n\n# A tibble: 10 × 3\n   name          species   species_category\n   &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;           \n 1 Qui-Gon Jinn  Human     &lt;NA&gt;            \n 2 Nute Gunray   Neimodian Other/Unknown   \n 3 Finis Valorum Human     &lt;NA&gt;            \n 4 Padmé Amidala Human     &lt;NA&gt;            \n 5 Jar Jar Binks Gungan    Other/Unknown   \n 6 Roos Tarpals  Gungan    Other/Unknown   \n 7 Rugor Nass    Gungan    Other/Unknown   \n 8 Ric Olié      Human     &lt;NA&gt;            \n 9 Watto         Toydarian &lt;NA&gt;            \n10 Sebulba       Dug       &lt;NA&gt;            \n\n\nIn the example above, we use slice() to skip down to part of the data where we can see the change. (The first 20 rows are all humans and droids.) We also used select() to focus on our columns of interest.\nNote we’ve only changed two of the 36 values we need to change, though. (You can see Toydarian and Dug have not been changed.) This method is very handy if you have just a few things to change.\nIn our case here, we could list all 36 changes, but … Use the Force, Luke.\n\n\nUsing .default\ncase_match() changes exactly what you specify and leaves anything you don’t specify as NA. If you want the non-matches to be something else, you can specify them with .default =.\nUsing this, we can set Human to Human and Droid to Droid, but then everything else to Other/Unknown.\nNOTE that the specific matches use ~ to separate what to look for and what to change it to, but the .default designation uses =.\n\nstarwars %&gt;% \n  mutate(\n    species_category = case_match(\n      species,\n      \"Human\" ~ \"Human\",\n      \"Droid\" ~ \"Droid\",\n      .default = \"Other/Unknown\",\n    )\n  ) %&gt;% # using select and slice to focus on change\n  select(name, species, species_category) %&gt;% slice(31:40)\n\n# A tibble: 10 × 3\n   name          species   species_category\n   &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;           \n 1 Qui-Gon Jinn  Human     Human           \n 2 Nute Gunray   Neimodian Other/Unknown   \n 3 Finis Valorum Human     Human           \n 4 Padmé Amidala Human     Human           \n 5 Jar Jar Binks Gungan    Other/Unknown   \n 6 Roos Tarpals  Gungan    Other/Unknown   \n 7 Rugor Nass    Gungan    Other/Unknown   \n 8 Ric Olié      Human     Human           \n 9 Watto         Toydarian Other/Unknown   \n10 Sebulba       Dug       Other/Unknown   \n\n\n\n\nCheck your results\n\nJedR Mind Trick: Even with these few rows, it’s hard to see all the changes made in your data. It is sometimes helpful to do a count() on your changes to check them. Just be sure to count the already-changed data, not the result you are saving into the new object.\n\nHere we save the recategorized data into a new object called sw_species and then run a count() on our two columns to check the results.\n\nsw_species &lt;- starwars %&gt;% \n  mutate(\n    species_category = case_match(\n      species,\n      \"Human\" ~ \"Human\",\n      \"Droid\" ~ \"Droid\",\n      .default = \"Other/Unknown\",\n    )\n  )\n\nsw_species %&gt;% \n  count(species, species_category, sort = TRUE)\n\n# A tibble: 38 × 3\n   species  species_category     n\n   &lt;chr&gt;    &lt;chr&gt;            &lt;int&gt;\n 1 Human    Human               35\n 2 Droid    Droid                6\n 3 &lt;NA&gt;     Other/Unknown        4\n 4 Gungan   Other/Unknown        3\n 5 Kaminoan Other/Unknown        2\n 6 Mirialan Other/Unknown        2\n 7 Twi'lek  Other/Unknown        2\n 8 Wookiee  Other/Unknown        2\n 9 Zabrak   Other/Unknown        2\n10 Aleena   Other/Unknown        1\n# ℹ 28 more rows\n\n\nThe case_match() function works great if you have one-to-one changes that don’t require logic. But when you have more complex needs, we need more Force."
  },
  {
    "objectID": "training/jedr-categorization.html#padawan-practice-case_match",
    "href": "training/jedr-categorization.html#padawan-practice-case_match",
    "title": "JedR: Categorization",
    "section": "Padawan practice: case_match",
    "text": "Padawan practice: case_match\nIf you look at the gender column in the data, you’ll see there are two values: masculine and feminine, but there are four records that don’t have a gender value are listed as NA.\n\nstarwars %&gt;% count(gender)\n\n# A tibble: 3 × 2\n  gender        n\n  &lt;chr&gt;     &lt;int&gt;\n1 feminine     17\n2 masculine    66\n3 &lt;NA&gt;          4\n\n\nFor this quest, you will use case_match() to fill in those blank values with unknown.\nNote in the code we are creating a new dataframe and filling with mutated starwars data.\nWithin the case_match section you’ll need to note what variable you are working from, what to do if that value is NA, and set the remainder using a default.\nAt the end it prints the results.\n\n\ngender_reveal &lt;- starwars %&gt;% \n  mutate(\n    gender_clean = case_match(\n      # Fill in here\n    )\n  )\n\ngender_reveal %&gt;% select(name, gender, gender_clean)\n\n\n\n\nHint: You should only have to set what to do of the gender is NA, then set the .default = to the existing gender.\n\n\nQuiz\n(Just page through the results of your quest above.)"
  },
  {
    "objectID": "training/jedr-categorization.html#using-case_when",
    "href": "training/jedr-categorization.html#using-case_when",
    "title": "JedR: Categorization",
    "section": "Using case_when()",
    "text": "Using case_when()\nThe case_when() function is useful when you need to set new values based on some kind of logic.\nHere we will use case_when to do the same thing we did above with case_match() and then explain how it is working below.\n\nstarwars %&gt;% \n  mutate(\n    species_category = case_when(\n      species == \"Human\" ~ \"Human\",\n      species == \"Droid\" ~ \"Droid\",\n      TRUE ~ \"Other/Unknown\"\n    )\n  ) %&gt;%\n  select(name, species, species_category) %&gt;% slice(31:40)\n\n# A tibble: 10 × 3\n   name          species   species_category\n   &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;           \n 1 Qui-Gon Jinn  Human     Human           \n 2 Nute Gunray   Neimodian Other/Unknown   \n 3 Finis Valorum Human     Human           \n 4 Padmé Amidala Human     Human           \n 5 Jar Jar Binks Gungan    Other/Unknown   \n 6 Roos Tarpals  Gungan    Other/Unknown   \n 7 Rugor Nass    Gungan    Other/Unknown   \n 8 Ric Olié      Human     Human           \n 9 Watto         Toydarian Other/Unknown   \n10 Sebulba       Dug       Other/Unknown   \n\n\nYou can see the syntax works differently (once we are past the mutate).\n\nWithin the case_when(), there are rules that split with ~. On the left is a logical test, and on the right is a new value designation.\nEach rule is run in order. A value is set only once, so if a value is set in one rule, it will NOT be reset by subsequent rules. You must write your rules from the most specific to the most general.\nThe last line TRUE ~ handles all values not already changed. If left out, values not specified would be set NA.\n\n\nA more complex example\nUnlike case_match() where you are drawing from values in one specific column, the logic tests used with case_when() can be just about anything as long as they evaluate to TRUE or FALSE.\nWhile this is a silly example, here we create a column called size_compare that notes if a character is “larger” or “smaller” than an average human, unless they are a droid, in which case they are labeled “mechanical”.\n\nstarwars %&gt;% \n  mutate(\n    size_compare = case_when(\n      species == \"Droid\" ~ \"mechanical\",\n      height &gt;= 170 & mass &gt;= 80 ~ \"larger\",\n      TRUE ~ \"smaller\"\n    )\n  ) %&gt;% \n  select(name, size_compare)\n\n# A tibble: 87 × 2\n   name               size_compare\n   &lt;chr&gt;              &lt;chr&gt;       \n 1 Luke Skywalker     smaller     \n 2 C-3PO              mechanical  \n 3 R2-D2              mechanical  \n 4 Darth Vader        larger      \n 5 Leia Organa        smaller     \n 6 Owen Lars          larger      \n 7 Beru Whitesun Lars smaller     \n 8 R5-D4              mechanical  \n 9 Biggs Darklighter  larger      \n10 Obi-Wan Kenobi     smaller     \n# ℹ 77 more rows\n\n\nNote we started with the rule for “Droid” because that is the most specific thing we needed to change. When then set the “larger” value, and the rest got “smaller.”"
  },
  {
    "objectID": "training/jedr-categorization.html#padawan-practice-case_when",
    "href": "training/jedr-categorization.html#padawan-practice-case_when",
    "title": "JedR: Categorization",
    "section": "Padawan practice: case_when",
    "text": "Padawan practice: case_when\nCreate a column called main_planet using the homeworld column. For each characters with a homeworld of “Tatooine” or “Naboo”, label it as TRUE and otherwise label as FALSE, which will create a logical datatype column.\n(This is a fill-in-the-blank thing …)\n\n\nmainchars &lt;- starwars %&gt;% \n  mutate(\n    main_planet_origin = case_when(\n      str_detect(_________, \"Tatooine|Naboo\") ~ ____,\n      TRUE ~ _____\n    )\n  )\nmainchars %&gt;% select(name, homeworld, main_planet_origin)\n\n\n\nPage through your results to check your answers.\nThat’s it for now.\n-30-"
  },
  {
    "objectID": "WebR Trails/jedr-trial-01-intro.html#jedr-trial-no.-1-introduction",
    "href": "WebR Trails/jedr-trial-01-intro.html#jedr-trial-no.-1-introduction",
    "title": "JedR Trial: Intro",
    "section": "JedR Trial No. 1: Introduction",
    "text": "JedR Trial No. 1: Introduction\nCongratulations! You have recently been hired as a data jedi for the Galactic News Hub, the premiere news organization for the Star Wars Universe. Your first task: apply beginning tidyverse skills to learn about the characters in the Star Wars universe you’ll be reporting on.\n\n1. Previewing our data\nFor this exercise, we will use the data collection called starwars. This data comes with the tidyverse package, so if you have loaded tidyverse into your R environment using library(), the starwars data should be there! As you can see below, starwars contains some information about Star Wars characters, like their name and height.\nLet’s learn a bit more about the structure of the starwars data and how to conquer these JedR Trials.\nThis is what it looks like when we load the tidyverse library and look at the first few lines in the starwars data. Each row of the data is a character within the Star Wars franchise:"
  },
  {
    "objectID": "WebR Trails/jedr-trial-01-intro.html",
    "href": "WebR Trails/jedr-trial-01-intro.html",
    "title": "JedR Trial No. 1: Introduction",
    "section": "",
    "text": "Congratulations! You have recently been hired as a data jedi for the Galactic News Hub, the premiere news organization for the Star Wars Universe. Your first task: apply beginning tidyverse skills to learn about the characters in the Star Wars universe you’ll be reporting on.\n\n1. Previewing our data\nFor this exercise, we will use the data collection called starwars. This data comes with the tidyverse package, so if you have loaded tidyverse into your R environment using library(), the starwars data should be there! As you can see below, starwars contains some information about Star Wars characters, like their name and height.\nLet’s learn a bit more about the structure of the starwars data and how to conquer these JedR Trials.\nThis is what it looks like when we load the tidyverse library and look at the first few lines in the starwars data. Each row of the data is a character within the Star Wars franchise:\n\nlibrary(tidyverse)\n\nstarwars |&gt; \n  head()\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n6 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nWithin the JedR Trails, you can enter and run code right inside this page. Since the tidyverse was loaded above, all the functions you would normally see in RStudio are available in this interactive. Once you enter the code, click the blue Run Code button to see the results, and then once you think you have the correct code, click the Submit Answer to pass the test.\nThe first thing you need to learn is how many rows are in the starwars data, along with all the columns and datatypes.\nWhat function would you add to the starwars data here to glimpse the data and find those answers?\n\n\n\n\n\n\n\n\n\nUse the glimpse() function from the {dplyr} package.\n\n\nglimpse(starwars)\nglimpse(starwars)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out the glimpse() function. You can learn more here.\n\n\n\n\nJust as you submitted the answer, your humanoid robot editor (J-327D) pops into your office and asks you how many people (characters) are in your data. What is your answer?\n\n\n\n\n\n\n\n\n\n\n\n14\n14\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out the columns from the previous question.\n\n\n\n\n\n\n2. Focusing on variables\nNow that we know how to glimpse into our data, let’s work on selecting specific variables of interest. Let’s say the Galactic News Hub has asked you to write a story about height differences across different species. What function would you use to select only the following variables in starwars: name, height, homeworld, and species?\n\n\n\n\n\n\n\n\n\n\n\nstarwars |&gt;\n  select(name, height, homeworld, species)\nstarwars |&gt;\n  select(name, height, homeworld, species)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nYou might look into the select() function, you can learn about here.\n\n\n\n\n\n\n3. Arranging our Data\nNow that we have glimpsed our data and selected our variables in the starwars, let’s arrange them using by height. What function would we add to our code below to arrange our data so that the tallest person is listed at the top? (Hint: since tidyverse arranges numbers from the smallest to the greatest number, you may need another function so the information is in descending order.)\n\n\n\n\n\n\n\n\n\n\n\nstarwars |&gt;\n  select(name, height, homeworld,species) |&gt;\n  arrange(height |&gt; desc())\nstarwars |&gt;\n  select(name, height, homeworld,species) |&gt;\n  arrange(height |&gt; desc())\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nI recommend checking out the arrange() function, you can learn about here. Don’t forget to put your result in descending order.\n\n\n\n\nSo many tall characters! If your humanoid robot editor (J-327D) wanted you to write a story about the tallest character in the data, who would that be?\n\n\n\n\n\n\n\n\n\n\n\n\"Yarael Poof\"\n\"Yarael Poof\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nLook at the result of previous code chunk\n\n\n\n\nGreat job! Please inform your JedR Master that you have completed this exercise."
  }
]