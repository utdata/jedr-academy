[
  {
    "objectID": "webr-trials/jedr-trial-06-bind.html#jedr-trial-no.-6-bind-and-join",
    "href": "webr-trials/jedr-trial-06-bind.html#jedr-trial-no.-6-bind-and-join",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†6: Bind and Join",
    "text": "JedR Trial No.¬†6: Bind and Join\n\n\n\nWith this JedR Trial, you will prove your experience in combining data. While we are using the starwars data in a fashion, it has been broken up into parts that you need to put back together.\n\n\nAbout our data\nWe start with three separate data frames for humans, droids and other species. The data frames have basic information on these characters, like height, weight, etc.\nThe droids data looks like this:\n\n\n\n\n\n\n\n\nThe humans and other data frames are similar, but have characters from those species only."
  },
  {
    "objectID": "webr-trials/jedr-trial-06-bind.html#stack-the-data",
    "href": "webr-trials/jedr-trial-06-bind.html#stack-the-data",
    "title": "JedR Academy",
    "section": "Stack the data",
    "text": "Stack the data\nStarting with the droids data, stack it together with the two other data frames (humans and other) and store the result into a single data frame called characters. You should end up with 87 observations with 6 variables. After you create the characters data frame, print it out to your notebook.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nYou might review the bind vignette in the Tidyverse documentation."
  },
  {
    "objectID": "webr-trials/jedr-trial-06-bind.html#join-with-more-data",
    "href": "webr-trials/jedr-trial-06-bind.html#join-with-more-data",
    "title": "JedR Academy",
    "section": "Join with more data",
    "text": "Join with more data\nNow that you have created the characters data, we need to join this with a different data set. Our characters data has the name of the character and then variables for physical characteristics like height and weight, etc.\nWe have a different data set available to us, called sw_bio that has more information, like the homeworld and species of each character. Your droid editor, J-327D, has asked you to add this bio information to your characters data.\nYou should end up with the same 87 observations, but you should end up with 11 variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nYou might review the join vignette in the Tidyverse documentation.\n\n\n\n\nWell done. This JedR Trial is complete. Please inform your JedR Master."
  },
  {
    "objectID": "webr-trials/jedr-trial-04-plot.html#jedr-trial-no.-4-plotting",
    "href": "webr-trials/jedr-trial-04-plot.html#jedr-trial-no.-4-plotting",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†4: Plotting",
    "text": "JedR Trial No.¬†4: Plotting\nIn this JedR Trial, we‚Äôll be exploring the ggplot2 skills. Like our previous exercise, we‚Äôll be using the data starwars in the tidyverse packages.\nYour humanoid robot editor (J-327D) has asked to see how many characters there are for each species in the starwars data. They have asked you to make a bar chart from this data.\nAs you may recall in your training, making a chart usually takes two steps: Preparing the data, then plotting the data.\nAs a reminder, here is the starwars data:\n\n\n\n\n\n\n\n\n\nPrepare your data\nTo prepare this data for your plot, you need to:\n\nGroup by species and count the number of rows. Name the new variable characters\nArrange the result so the most characters are at the top.\nDrop any NA values.\nSave the result of this into a new data frame called species_count and then print that out at the end.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nFill in the blanks with functions and variables\nspecies_count &lt;- starwars |&gt;\n  ________(_______) |&gt;\n  _________(characters = _()) |&gt;\n  _______(desc(characters)) |&gt;\n  drop_na()\n\nspecies_count\n\n\n\n\n\n\nPlotting the chart\nNow that we have our prepared data into species_count, you need to plot your data as a bar chart, with the species with the most characters at the top.\nA couple of things that the code checker is persnickety about:\n\nYou should use the geom for a column chart, but the flip it so you can read the species names.\nDon‚Äôt forget to reorder your bars.\nFor the labs, we‚Äôre looking only for three things:\n\nThe title should be ‚ÄúCount of species in Star Wars‚Äù\nThe axis that has the numbers should be called ‚ÄúNumber of characters‚Äù.\nThe other axis label should be blank or removed.\n\nSave the results into a new object called count_chart and then use print() to see the new count_chart plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nTry building the plot one layer at a time\nFirst, just get the chart to work\nggplot(species_count, ___(x = _______, y = __________)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nThen you modify to reorder the bars and flip the coordinates\nggplot(species_count, ___(x = _______(species, characters), y = __________)) +\n  geom_col() +\n  __________()\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nThen add your labels\nggplot(species_count, ___(x = _______(species, characters), y = __________)) +\n  geom_col() +\n  __________() +\n  ____(\n    _____ = \"Count of species in Star Wars\",\n    y = \"Number of characters\",\n    x = \"\"\n  )\n\n\n\n\nShow your completed plot to your JedR Master."
  },
  {
    "objectID": "webr-trials/jedr-trial-02-count.html#jedr-trial-no.-2-summarize-by-counting",
    "href": "webr-trials/jedr-trial-02-count.html#jedr-trial-no.-2-summarize-by-counting",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†2: Summarize by counting",
    "text": "JedR Trial No.¬†2: Summarize by counting\nAs a JedR Padawan of the Galactic News Hub, you have been assigned to help with a new story about the demographics of the Star Wars Universe. After pitching a few different topics, your droid editor (J-327D) has green lighted a pitch about species variation. For this article, you have been asked to provide a summary statistic about which species is the most common in the Star Wars universe.\nFor this task, you will summarize and group the characters by species. You will then arrange the data to identify the most common species of all the Star Wars characters.\n\n1. Summarizing\nIf you recall from our earlier exercise, starwars is a dataset with 87 Star Wars characters.\n\n\n\n\n\n\n\n\nFirst, we‚Äôll need to group the data by species and then summarize by counting the number of rows of each species. (We will tackle the arranging part later.)\nHow do we do that? What functions would we use? We insist you name the new variable ‚Äúcharacters‚Äù!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out the group_by() and summarize() in Chapter 4\n\n\n\n\n\n\n2. Arrange the results\nWhile the group_by() and summarize() functions are great for summarizing this information, a Padawan youngling has pointed out that the information is not ordered.\nüôÑ Rolling your eyes, you tell them that you know this! We just need to use another function in order to arrange this data. To illustrate your point, let‚Äôs arrange this data now.\nAs a tip, don‚Äôt forget that we often want to sort the information by descending order, because journalists are typically interested in the most of something.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out arrange(). You can learn more here.\n\n\n\n\nNow that you‚Äôve grouped the data, summarized the number of characters of each species, and arranged the data (in descending order), you can finally tell your editor that you‚Äôve compiled this information!\nWhat species is the most common in Star Wars?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nLook at the result of previous code chunk\n\n\n\n\nExcellent! Please tell your JedR Master that you have completed this trial."
  },
  {
    "objectID": "resources/trials.html",
    "href": "resources/trials.html",
    "title": "JedR Trials",
    "section": "",
    "text": "These modules are designed to test and strengthen your R skills through a series of interactive lessons. Each module introduces essential data manipulation and visualization techniques, using engaging exercises based on the starwars dataset. If you‚Äôd like to run them locally, you can find the necessary files in the webr-trials/ folder. The topics covered are tailored to make the Reporting with Data class and apply in various projects. If you‚Äôre interested in creating additional JedR Trials content, please explore the contributions tab for guidelines and opportunities to join the JedR Republic.\n\nIntroduction: Introduces the starwars data and the interactive format of the lessons. Covers some basic functions to look at data.\nSummarize with Count: Covers counting rows using group_by and summarize. (We skip count() here to focus on group_by, summarize and arrange.)\nSummarize with Math: Covers grouping data and math functions within summarize.\nPlotting: Making a very basic ggplot chart.\nPivoting: Making data wider and longer.\nBind and Join: Combining data.",
    "crumbs": [
      "JedR Trials"
    ]
  },
  {
    "objectID": "resources/trials.html#others-to-come",
    "href": "resources/trials.html#others-to-come",
    "title": "JedR Trials",
    "section": "Others to come?",
    "text": "Others to come?\nThis is a work in progress. We have a list of ideas and would consider additions that follow our philosophy (which is admittedly also under development). Check out the JedR Contribution tab for more information!",
    "crumbs": [
      "Trials"
    ]
  },
  {
    "objectID": "resources/learnr.html",
    "href": "resources/learnr.html",
    "title": "Learning learnr",
    "section": "",
    "text": "Our goal here is to introduce packages used within the JedR Academy. It mostly points to other resources with some description with how the link might fit into our workflow.\nlearnr is the package that allows us to create interactive code in a browser. We are also using shinyapps to publish our interactive files on the web.\nBefore working on any code, make sure you are in a clone of the repo in your own branch."
  },
  {
    "objectID": "resources/learnr.html#learnr",
    "href": "resources/learnr.html#learnr",
    "title": "Learning learnr",
    "section": "learnr",
    "text": "learnr\nProbably the best way to learn learnr is to scan the documentation, look through some examples and then start building your own.\n\nStart with the learnr package site. Look through one of the examples on that page, along with the code that created it.\nGo through the interactive exercises and interative questions pages.\nLook through some examples in this repo, like trials/jedr-trial-01-intro.Rmd and training/jedr-categorization.Rmd.\nPick an idea from this list and start working on it, in the proper folder."
  },
  {
    "objectID": "resources/learnr.html#structure-and-style",
    "href": "resources/learnr.html#structure-and-style",
    "title": "Learning learnr",
    "section": "Structure and style",
    "text": "Structure and style\n\nA Trial is little test for folks to practice a new skill. Look at the files in the trails folders for examples to follow. They should be short and focused, with enough hints to help ensure student success. They don‚Äôt have to pair with a tutorial, but it would be nice. These should be saved in the trails folder.\nA Training is a more involved tutorial designed to teach a new skill using familiar data sets, with some fun thrown in. To get an idea of how they work, do the Categorization tutorial to see and experience the style. Then look through the code of that file training/jedr-categorization.Rmd as an example. These should be saved in the training folder."
  },
  {
    "objectID": "resources/learnr.html#publishing-to-the-web",
    "href": "resources/learnr.html#publishing-to-the-web",
    "title": "Learning learnr",
    "section": "Publishing to the web",
    "text": "Publishing to the web\nProfessor McDonald will handle publishing and linking to any new interactives. When you are ready for that, talk to him."
  },
  {
    "objectID": "index.html#what-is-jedr-academy",
    "href": "index.html#what-is-jedr-academy",
    "title": "Welcome to JedR Academy",
    "section": "What is JedR Academy?",
    "text": "What is JedR Academy?\nTo be clear, this isn‚Äôt a package.\nThis project is a series of quarto live interactive tutorials designed to develop and improve R skills with a heavy lean on the tidyverse. There are two main goals:\n\nTo focus tutorials on feats of skill or tasks to accomplish instead of on specific packages or functions.\nTo use the same data whenever possible to avoid the cognitive load of learning new data for each example.\n\nThere are two types of lessons:\n\nJedR Trials: Short tests over specific skills. These trials are used by students in our J 327D Reporting with Data class.\nJedR Training: Tutorials focused on feats of skills instead of on specific packages. For instance, ‚ÄúHow to manage dates‚Äù vs ‚ÄúHow to use lubridate.‚Äù\n\nJedR Padawans can complete these lessons online through the provided links, without additional setup. For those who prefer working locally, you can download the repo to run each notebook directly on your machine. The notebooks are organized in the webr-trials/ and webr-training/ folders.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#data-sources",
    "href": "index.html#data-sources",
    "title": "Welcome to JedR Academy",
    "section": "Data sources",
    "text": "Data sources\nOur lessons are built around the Star Wars universe, primarily utilizing the starwars ‚Äúcharacters‚Äù data from the tidyverse package. To enhance these lessons, we‚Äôve incorporated additional Star Wars data, which can be found in the data/ folder. The starwars data from tidyverse offers a well-sized dataset that‚Äôs both approachable and intricate, making it a valuable learning tool. If you‚Äôd like to read more about the data click here",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Welcome to JedR Academy",
    "section": "Credits",
    "text": "Credits\nThis project was the brainchild of Christian McDonald, associate professor of practice at the School of Journalism and Media at the University of Texas at Austin. He began collaborating soon thereafter with Dr.¬†Jo Lukito, an assistant professor also at UT JaM.\nOther contributors include:\n\nChristian Overgaard, Doctoral student. He helped think through the project and wrote the ‚ÄúManaging dates‚Äù tutorial.\nTamara Rodriguez designed our JedR hex logo.\nJohan Villatoro transitioned lessons and training into WebR.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "resources/github.html",
    "href": "resources/github.html",
    "title": "Using git & Github",
    "section": "",
    "text": "The purpose of this bootcamp lesson is to fill gaps that my students might have before they can successfully contribute to this project. It might serve best as pointers to existing documentation for certain skills, but then explanations of how they fit into our workflow.",
    "crumbs": [
      "JedR Contribution"
    ]
  },
  {
    "objectID": "resources/github.html#prerequisites",
    "href": "resources/github.html#prerequisites",
    "title": "Using git & Github",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nTerminal: If you are not familiar with using a Terminal at all, then there is a chapter in Intro to Coding for Journalists that might be a good first look. FreeCodeCamp has a Command Line for Beginners that is more detailed than what we need here.\nInstalling Git: Chapters 2.1 through 2.5 of ICJ Setting Up handle installing git and configuring ssh keys, which I think is worth doing. If you already have git and Github and know how to use them, you are good.\nUsing Git: There is a section in Intro to Coding for Journalists on how to use Git in the context of that class. The basics apply here, as well.",
    "crumbs": [
      "JedR Contribution"
    ]
  },
  {
    "objectID": "resources/github.html#clone-the-repo",
    "href": "resources/github.html#clone-the-repo",
    "title": "Using git & Github",
    "section": "Clone the repo",
    "text": "Clone the repo\nTo get the jedr-academy repo on your computer and be able to contribute to its code, you have to clone the repo. This downloads a copy of the code and it‚Äôs history to your computer.\n\nDO NOT create a project folder in advance! You‚Äôll get one when you clone.\nLaunch Terminal and use cd to get to the directory where you to download the code to.\nDo git clone git@github.com:utdata/jedr-academy.git to download the repo and it‚Äôs commit history.\nNow you can close Terminal and open the project in RStudio.\n\nYou only have to do this once.",
    "crumbs": [
      "JedR Contribution"
    ]
  },
  {
    "objectID": "resources/github.html#branches",
    "href": "resources/github.html#branches",
    "title": "Using git & Github",
    "section": "Branches",
    "text": "Branches\nThe Way to contribute to JedR is to use a git branch. &lt;= Read that tutorial to get an idea how they work.\n\nWith your project open in RStudio, go to the Terminal within RStudio.\nDo git checkout -b new-branch but use a more descriptive name than ‚Äúnew-branch‚Äù, like ‚Äúpivoting-tutorial‚Äù. The name should be slug-friendly: all lowercase, words connected with dashes.\nDo git branch to double-check which branch are on.\n\nAt this point, you are working on YOUR copy of the code. You can experiment, add and commit code at will. You can push the code to Github in your branch with ‚Ä¶\ngit push origin new-branch\n‚Ä¶ but with your branch name.\nDo know if you edit existing files on your local branch that also get edited by others, then we will have to resolve any conflicts. That‚Äôs fine, but can be complicated. Just reach out to Christian for help.\n\nPull requests\nWhen you are done with your changes and want to merge them into the default branch, let Christian know via email and he‚Äôll create a Pull Request. If you want to learn more about that, then request to do it together and he‚Äôll explain it.\nThe pull request process compares the new code to the existing code and notes any conflicts, which have to be ‚Äúresolved‚Äù before the branches can be merged.",
    "crumbs": [
      "JedR Contribution"
    ]
  },
  {
    "objectID": "resources/github.html#switching-between-branches",
    "href": "resources/github.html#switching-between-branches",
    "title": "Using git & Github",
    "section": "Switching between branches",
    "text": "Switching between branches\nNow that you are working on a code base that others might be working on, you have to ‚Äúgit pull‚Äù as well as ‚Äúgit push‚Äù.\nSome things to consider:\n\nIf you are going to switch branches (like from your own feature branch back to main), then you want to commit (or stash) your current changes first.\ngit checkout branch-name will check out that branch on your local machine.\ngit pull origin branch-name will pull the latest version from the Github down to your computer. This is especially important if you are checking out a branch that others have worked on, like main.",
    "crumbs": [
      "JedR Contribution"
    ]
  },
  {
    "objectID": "resources/training.html",
    "href": "resources/training.html",
    "title": "JedR Training",
    "section": "",
    "text": "These modules are designed to help you develop specific R skills, with accessible links provided for online access. If you‚Äôd like to run them locally, you can find the necessary files in the webr-trainings/ folder. The topics covered are tailored to make R easier to navigate and apply in various projects. If you‚Äôre interested in creating additional JedR Training content, please explore the contributions tab for guidelines and opportunities to join the JedR Republic.\n\nCategorization: When you need to rename values in your data, perhaps to create a new categorization schema.\nManage dates: When you need help parsing dates or making useful date parts for grouping.",
    "crumbs": [
      "JedR Trainings"
    ]
  },
  {
    "objectID": "webr-trials/jedr-trial-01-intro.html#jedr-trial-no.-1-introduction",
    "href": "webr-trials/jedr-trial-01-intro.html#jedr-trial-no.-1-introduction",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†1: Introduction",
    "text": "JedR Trial No.¬†1: Introduction\nCongratulations! You have recently been hired as a data jedi for the Galactic News Hub, the premiere news organization for the Star Wars Universe. Your first task: apply beginning tidyverse skills to learn about the characters in the Star Wars universe you‚Äôll be reporting on.\n\n1. Previewing our data\nFor this exercise, we will use the data collection called starwars. This data comes with the tidyverse package. As you can see below, starwars contains some information about Star Wars characters, like their name and height.\nLet‚Äôs learn a bit more about the structure of the starwars data and how to conquer these JedR Trials.\nThis is what it looks like when we load the tidyverse library and look at the first few lines in the starwars data. Each row of the data is a character within the Star Wars franchise:\n\n\n\n\n\n\n\n\nWithin the JedR Trails, you can enter and run code right inside this page. Please make sure to only remove the underscores to add your answers. Since the tidyverse was loaded above, all the functions you would normally see in RStudio are available. Once you enter the code, click the blue Run Code button to see the results.\nThe first thing you need to learn is how many rows are in the starwars data, along with all the columns and datatypes.\nWhat function would you add to the starwars data here to glimpse the data and find those answers?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out the glimpse() function. You can learn more here.\n\n\n\n\nJust as you submitted the answer, your humanoid robot editor (J-327D) pops into your office and asks you how many people (characters) are in your data. What is your answer?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nCheck out the rows from the previous question.\n\n\n\n\n\n\n2. Focusing on variables\nNow that we know how to glimpse into our data, let‚Äôs work on selecting specific variables of interest. Let‚Äôs say the Galactic News Hub has asked you to write a story about height differences across different species. What function would you use to select only the following variables in starwars: name, height, homeworld, and species? (Hint: Write your function in that order!)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nYou might look into the select() function, you can learn about here.\n\n\n\n\n\n\n3. Arranging our Data\nNow that we have glimpsed our data and selected our variables in the starwars, let‚Äôs arrange them using by height. What function would we add to our code below to arrange our data so that the tallest person is listed at the top? (Hint: since tidyverse arranges numbers from the smallest to the greatest number, you may need another function so the information is in descending order.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nI recommend checking out the arrange() function, you can learn about here. Don‚Äôt forget to put your result in descending order.\n\n\n\n\nSo many tall characters! If your humanoid robot editor (J-327D) wanted you to write a story about the tallest character in the data, who would that be?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nLook at the result of previous code chunk\n\n\n\n\nGreat job! Please inform your JedR Master that you have completed this exercise."
  },
  {
    "objectID": "webr-trials/jedr-trial-03-sum.html#jedr-trial-no.-3-summarize-with-math",
    "href": "webr-trials/jedr-trial-03-sum.html#jedr-trial-no.-3-summarize-with-math",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†3: Summarize with math",
    "text": "JedR Trial No.¬†3: Summarize with math\nWelcome, Padawan. In this exercise, you‚Äôll be tested on skills using math-based summarize() functions. Like our previous exercises, we‚Äôll be using the dataset starwars in the tidyverse packages.\nIf you recall from our earlier exercise, starwars is a dataset with 87 Star Wars characters.\n\n\n\n\n\n\n\n\n\nThe quest\nYour droid editor, J-327D, notes that Chewbacca is taller than the rest of the crew in the Millennium Falcon, but he wonders if he is just tall for a Wookiee. He asks you to find the average heights of Humans, Droids, Gungans and Wookiees from within the starwars data. (By the way, that height variable is a measurement in centimeters.)"
  },
  {
    "objectID": "webr-trials/jedr-trial-03-sum.html#select-and-filter",
    "href": "webr-trials/jedr-trial-03-sum.html#select-and-filter",
    "title": "JedR Academy",
    "section": "Select and filter",
    "text": "Select and filter\nFirst, create a data frame with just the columns and rows you need to work with.\n\nSelect only the name, height, and species variables from the starwars data.\nFilter that to include only rows with species of ‚ÄúHuman‚Äù, ‚ÄúDroid‚Äù, ‚ÄúGungan‚Äù and ‚ÄúWookiee‚Äù.\nSave the results into a new data frame called characters and then print out the new characters data frame.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nStart with your select. Fill in the blanks\nstarwars |&gt;\n  ______(name, height, species)\n\n\n\n\n\n\n\n\n\n\n\nHint 2\n\n\n\n\n\nThere are a couple of ways to filter species Once choice:\nstarwars |&gt;\n  ______(name, height, species) |&gt;\n  ______(_______ %in% c(\"Human\", \"Droid\", \"Gungan\", \"Wookiee\"))\n\n\n\n\n\n\n\n\n\n\n\nHint 3\n\n\n\n\n\nOnce have the code, save it into characters\ncharacters &lt;- starwars |&gt;\n  ______(name, height, species) |&gt;\n  ______(_______ |&gt; c(\"Human\", \"Droid\", \"Gungan\", \"Wookiee\"))"
  },
  {
    "objectID": "webr-trials/jedr-trial-03-sum.html#finding-the-mean",
    "href": "webr-trials/jedr-trial-03-sum.html#finding-the-mean",
    "title": "JedR Academy",
    "section": "Finding the mean",
    "text": "Finding the mean\nIn our last JedR Trial, we counted the number of characters (rows) that were different species. In this trail we need to use group_by() and summarize() and arrange() again, but we must summarize to get the average height ‚Äì or mean() ‚Äì of each species in the data.\nDo note:\n\nIf you try to do match on rows with no values NA, then the result is also NA. You can fix this by adding na.rm = TRUE to remove those rows from consideration.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nTry filling in the blanks\ncharacters |&gt;\n  ________(_______) |&gt;\n  _________(height_avg = ____(______, na.rm = TRUE)) |&gt;\n  _______(____(height_avg))\n\n\n\n\nNow you should be able to answer this following question:\nAmong Humans, Droids, Gungans and Wookies, which Star Wars species is the tallest?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nLook at the result of the previous code chunk\n\n\n\n\nPlease inform your JedR Master that you have completed this trial."
  },
  {
    "objectID": "webr-trials/jedr-trial-05-pivot.html#jedr-trial-no.-5-pivot-data",
    "href": "webr-trials/jedr-trial-05-pivot.html#jedr-trial-no.-5-pivot-data",
    "title": "JedR Academy",
    "section": "JedR Trial No.¬†5: Pivot data",
    "text": "JedR Trial No.¬†5: Pivot data\n\n\n\nIn this JedR Trial we will explore your ability to pivot data to suit your needs. This is a common challenge to prepare data for charting in ggplot or Datawrapper.\nYour droid editor (J-327D) has sent you some data that they would like to see in a different format. J-327D is pretty sure you can use your JedR powers to ‚Äúpivot‚Äù this data to their liking."
  },
  {
    "objectID": "webr-trials/jedr-trial-05-pivot.html#make-wider-tables",
    "href": "webr-trials/jedr-trial-05-pivot.html#make-wider-tables",
    "title": "JedR Academy",
    "section": "Make wider tables",
    "text": "Make wider tables\nThis is the data you get from J-327D. It is a table with the number of characters (as in characters in a story) from the starwars data based on their species and gender identity.\n\n\n\n\n\n\n\n\nBut J-327D would like to see this data formatted so that it is easier to read ‚Ä¶ where for each species there is a column for each gender value. Like this:\n\n\n\n\n\n\n\n\n\nDo. Or do not. There is no try.\nWrite the code below that will transform the characters data into the format noted above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\nYou might review the pivoting vignette in the Tidyverse documentation.\n\n\n\n\n\n\nRepeat, you must. Train yourself!\nWell done, Padawan. Your droid editor is quite pleased, but now they want to see the table with the species as the new columns.\nCan you make the characters data look like this:"
  },
  {
    "objectID": "webr-trials/jedr-trial-05-pivot.html#make-longer-views",
    "href": "webr-trials/jedr-trial-05-pivot.html#make-longer-views",
    "title": "JedR Academy",
    "section": "Make longer views",
    "text": "Make longer views\n\nControl, control, you must learn control!\nNow that you have mastered, pivoting wider, can you go back the other way?\nStarting with our first widened table, which will be in a tibble called gender_table, can you convert the data back to its original form, to this?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat job, padawan. Please inform your JedR Master that you have completed this trial."
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#how-to-make-categories-from-data",
    "href": "webr-trainings/jedr-categorization.html#how-to-make-categories-from-data",
    "title": "Categorization",
    "section": "How to make categories from data",
    "text": "How to make categories from data\nWelcome Padawan. May your quest to become a JedR Master be fruitful. ‚ÄúDo or do not. There is no try.‚Äù\nSometimes as journalists (or data scientists) we need to create new categories for our data. An example might be where we have a column of data that has too many different values to plot effectively. We might be able to re-categorize those values to fewer individual choices, maybe combining less important values into a generic term like ‚Äúother‚Äù.\nSome real-worldish examples:\n\nYou want to show race/ethnicity breakdowns in a chart or story about Hispanic representation. There are eight different values and some are quite small. You might create a column to use the values Asian, Black, Hispanic and White with all others changed to ‚ÄúOther‚Äù.\nPerhaps you are doing a story on crime and want to highlight violent crimes vs property vs other crimes. You might create a new column that categorizes many individual charges into these buckets.\n\nWe‚Äôre taking records and putting them into piles or groups based on one or more values.\n\nJedR Mind Trick: When we categorize values like this, we want to create a new column intead of overwriting an existing one. This way you can check your work. You can always remove or rename columns later.\n\n\nGoals of this training session\n\nTo apply case_match() within a mutate() to create data categories. It‚Äôs a one-to-one match, for the most part.\nTo apply case_when() within a mutate() to create data categories. This allows more complex logic."
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#our-scenario",
    "href": "webr-trainings/jedr-categorization.html#our-scenario",
    "title": "Categorization",
    "section": "Our scenario",
    "text": "Our scenario\nHere at the Galactic News Hub, we have a dataset of all the sources we connect with on a regular basis: The starwars data set that comes with the tidyverse library.\n\n\n\n\n\n\n\n\nThis data includes a variable called species, and our editor wants a report breaking down the species of our source list based on three broad categories: human, droid, and other. Our editor is hoping we can later cross reference these categories against gender and other variables within the source list.\nTo accomplish this, it would be helpful to have a ‚Äúspecies_category‚Äù variable using these three values so we can group and aggregate with other columns.\nLet‚Äôs take a look at the species column using count().\n\n\n\n\n\n\n\n\nYou can see that Human and Droid values dominate the data. The next most frequent values is NA. Maybe we can convince our editor to make that category Other/Unknown."
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#using-case_match",
    "href": "webr-trainings/jedr-categorization.html#using-case_match",
    "title": "Categorization",
    "section": "Using case_match()",
    "text": "Using case_match()\nOne of the easier methods to categorize data is to use case_match(). The logic is straighforward: For this value, substitute that value.\nTo make clear our goal here for the Galactic Hub News: We want to create a new column called species_category that has three values: Human, Droid, Other/Unknown. And they need to be based on the existing species variable.\n\nHow case_match works\nWhile is is possible to recatagorize our values into the same column, a good JedR will instead use mutate() and case_when() to create a new column and then fill it with the results.\ndata |&gt; \n  mutate(\n    new_column = case_when(\n      existing_column,\n      \"Old Value 1 from existing_column\" ~ \"New Value 1\",\n      \"Old Value 2 from existing_column\" ~ \"New Value 2\",\n      .default = \"Value for everything else\"\n    )\n  )\n\nThis is standard usage for the mutate() function ‚Ä¶ you create the new column and then set it to a value. In this case, we are setting the value to the result of the case_when() function.\nWithin case_when(), we have to first name the column we are pulling from. Like where are we looking for these values?\nThen we have a series of statements separated with ~. If we find what is on the left-hand side, then we change it to what is on the right-hand side.\nLastly we have a ‚Äúdefault‚Äù to handle everything else we haven‚Äôt specified. In some cases you might make this .default = existing_column to keep the existing value for those rows.\n\nThe order you put these is important. Once a match has been found and updated, that value won‚Äôt be changed again.\nSo, with our starwars data, a partial solution might look like this:\n\n\n\n\n\n\n\n\nIn the example above, we use slice() to skip down to part of the data where we can see the change. (The first 20 rows are all humans and droids.) We also used select() to focus on our columns of interest.\nNote we‚Äôve only changed two of the values we need to change, though. (You can see Toydarian and Dug have not been changed.) This method is very handy if you have just a few things to change.\nIn our case here, we could list all 36 changes, but ‚Ä¶ Use the Force, Luke.\n\n\nUsing .default\ncase_match() changes exactly what you specify and leaves anything you don‚Äôt specify as NA. If you want the non-matches to be something else, you can specify them with .default =.\nUsing this, we can set Human to Human and Droid to Droid, but then everything else to Other/Unknown.\nNOTE that the specific matches use ~ to separate what to look for and what to change it to, but the .default designation uses =.\n\n\n\n\n\n\n\n\n\n\nCheck your results\n\nJedR Mind Trick: Even with these few rows, it‚Äôs hard to see all the changes made in your data. It is sometimes helpful to do a count() on your changes to check them. Just be sure to count the already-changed data, not the result you are saving into the new object.\n\nHere we save the recategorized data into a new object called sw_species and then run a count() on our two columns to check the results.\n\n\n\n\n\n\n\n\nThe case_match() function works great if you have one-to-one changes that don‚Äôt require logic. But when you have more complex needs, we need more Force."
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#padawan-practice-case_match",
    "href": "webr-trainings/jedr-categorization.html#padawan-practice-case_match",
    "title": "Categorization",
    "section": "Padawan practice: case_match",
    "text": "Padawan practice: case_match\nIf you look at the gender column in the data, you‚Äôll see there are two values: masculine and feminine, but there are four records that don‚Äôt have a gender value are listed as NA.\n\n\n\n\n\n\n\n\nFor this quest, you will use case_match() to fill in those blank values with unknown.\nNote in the code we are creating a new dataframe and filling with mutated starwars data.\nWithin the case_match section you‚Äôll need to note what variable you are working from, what to do if that value is NA, and set the remainder using a default.\nAt the end it prints the results."
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#using-case_when",
    "href": "webr-trainings/jedr-categorization.html#using-case_when",
    "title": "Categorization",
    "section": "Using case_when()",
    "text": "Using case_when()\nThe case_when() function is useful when you need to set new values based on some kind of logic.\nHere we will use case_when to do the same thing we did above with case_match() and then explain how it is working below.\n\n\n\n\n\n\n\n\nYou can see the syntax works differently (once we are past the mutate).\n\nWithin the case_when(), there are rules that split with ~. On the left is a logical test, and on the right is a new value designation.\nEach rule is run in order. A value is set only once, so if a value is set in one rule, it will NOT be reset by subsequent rules. You must write your rules from the most specific to the most general.\nThe last line .default = handles all values not already changed. If left out, values not specified would be set NA.\n\n\nA more complex example\nUnlike case_match() where you are drawing from values in one specific column, the logic tests used with case_when() can be just about anything as long as they evaluate to TRUE or FALSE.\nWhile this is a silly example, here we create a column called size_compare that notes if a character is ‚Äúlarger‚Äù or ‚Äúsmaller‚Äù than an average human, unless they are a droid, in which case they are labeled ‚Äúmechanical‚Äù.\n\n\n\n\n\n\n\n\nNote we started with the rule for ‚ÄúDroid‚Äù because that is the most specific thing we needed to change. When then set the ‚Äúlarger‚Äù value, and the rest got ‚Äúsmaller.‚Äù"
  },
  {
    "objectID": "webr-trainings/jedr-categorization.html#padawan-practice-case_when",
    "href": "webr-trainings/jedr-categorization.html#padawan-practice-case_when",
    "title": "Categorization",
    "section": "Padawan practice: case_when",
    "text": "Padawan practice: case_when\nCreate a column called main_planet using the homeworld column. For each characters with a homeworld of ‚ÄúTatooine‚Äù or ‚ÄúNaboo‚Äù, label it as TRUE and otherwise label as FALSE, which will create a logical datatype column.\n(This is a fill-in-the-blank thing ‚Ä¶)\n\n\n\n\n\n\n\n\n\n\n\nPage through your results to check your answers.\nThat‚Äôs it for now.\n-30-"
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html",
    "href": "webr-trainings/jedr-manage-dates.html",
    "title": "JedR: Managing dates",
    "section": "",
    "text": "Import data\n\n\n\n\n\n\n\n\nThis dataset has information about the Star Wars Rebels series. For each of the show‚Äôs 69 episodes, we have its episode number, air date, title, and season.\nNote that some of the column names have spaces in them, which can make life harder. To fix it, let‚Äôs use the clean_names() function from the Janitor package:"
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#introduction",
    "href": "webr-trainings/jedr-manage-dates.html#introduction",
    "title": "JedR: Managing dates",
    "section": "Introduction",
    "text": "Introduction\nHello, young Padawan! In this tutorial we‚Äôll look at managing dates, often using Lubridate package, which can make life easier when dealing with dates in R. In doing so, we‚Äôll examine a dataset, scraped from tvmaze.com, with information about the Star Wars Rebels series. I encourage you to follow along in your own R notebook! Good luck and may the force be with you!\n\nImport data\n\n\n\n\n\n\n\n\nThis dataset has information about the Star Wars Rebels series. For each of the show‚Äôs 69 episodes, we have its episode number, air date, title, and season.\nNote that some of the column names have spaces in them, which can make life harder. To fix it, let‚Äôs use the clean_names() function from the Janitor package:\n\n\n\n\n\n\n\n\nNow, the column names are easier to work with."
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#parsing-dates-how-to-reconize-dates-in-r",
    "href": "webr-trainings/jedr-manage-dates.html#parsing-dates-how-to-reconize-dates-in-r",
    "title": "JedR: Managing dates",
    "section": "Parsing dates: How to reconize dates in R",
    "text": "Parsing dates: How to reconize dates in R\nNotice that when we used the glimpse() above, we also got info about the type of each column. The episode number and season are read as dbl (‚Äúdoubles, which is a number‚Äù), whereas the episode title and air date are read as chr (‚Äúcharacters‚Äù).\nTo work effectively with dates, we need R to recognize when we‚Äôre reading with dates. Do fix this, we can use lubridate‚Äôs parse date functions. In this particular dataset, the dates are written in the dmy (date-month-year) format. (If you look in the glimpse() output above, you‚Äôll see that the first observation, for example, was: ‚Äú13-Oct-14‚Äù). Let‚Äôs use lubridate‚Äôs dmy() function to create a new version of the dataset, called rebels_fix, which has a new column called air_date_fixed:\n\n\n\n\n\n\n\n\nNotice that, in the chunk above, we‚Äôre just looking at the output to see that this worked as intented. See that the air_date_fixed column is being read as a date whereas the original_air_date column was read as a character? Also, we‚Äôre not saving it into a new object using the &lt;- operator. Let‚Äôs use the &lt;- operator operator to save our work in a new object, called rebels_cl, without the original_air_date column, which we‚Äôre not going to need:\n\n\n\n\n\n\n\n\nTwo key things to notice here:\n\nair_date_fixed has the format date.\nIn air_date_fixed, the year is written first, followed by the month and then the day. That‚Äôs just what the date format looks like in R.\n\nIn this example, lubridate‚Äôs dmy() function came in handy. Here are some other functions we might‚Äôve used if the dates had been formatted differently:\n\n\n\n\n\n\n\n\nYou can find more examples and tips in this cheatsheet.\n\nPadawan practice: Parsing dates\nHere‚Äôs a small portion of the data, called parsing_practice_df, with three columns that need to be parsed:\n\n\n\n\n\n\n\n\nEach column is currently written in the character format and should be converted to the date format. Can you figure out how to do this?\n\nPractice: Parse date1\nHint: Replace the three lines, ___ with the appropriate function.\n\n\n\n\n\n\n\n\n\n\n\nHere, as in the two following exercises, we‚Äôre not saving the output but only displaying it. If we wanted to save it, we‚Äôd use the &lt;- operator. Okay, see if you can solve the two following exercises, too!\n\n\nPractice: Parse date2\n\n\n\n\n\n\n\n\n\n\n\n\n\nPractice: Parse date3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother way to parse dates\nBase R also has a function to parse dates, called as.Date(), which you can read more about here."
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#working-with-dates",
    "href": "webr-trainings/jedr-manage-dates.html#working-with-dates",
    "title": "JedR: Managing dates",
    "section": "Working with dates",
    "text": "Working with dates\nLet‚Äôs now make use of our newly created air_date_fixed column to understand the data.\n\nWhich episodes were oldest or newest?\nWe can use the arrange() function to sort data frames based on dates.\n\nThe oldest episodes\n\n\n\n\n\n\n\n\n\n\nThe newest episodes\n\n\n\n\n\n\n\n\n\n\n\nOnly view episodes that aired before or after a given date\nWe can use the filter() function to only view episodes that aired before or after a given date:\n\nEpisodes aired in 2018 (the last year available)\n\n\n\n\n\n\n\n\n\n\nEpisodes that aired in February 2016\n\n\n\n\n\n\n\n\n\n\nPadawan practice: using filter() with dates\nIdentify the episodes that aired in October 2017.\nHint: Use the filter() function to specify that you only want to include episodes that aired on October 1, 2017 or later‚Äîand also aired before November 1 the same year."
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#using-specific-parts-of-a-date",
    "href": "webr-trainings/jedr-manage-dates.html#using-specific-parts-of-a-date",
    "title": "JedR: Managing dates",
    "section": "Using specific parts of a date",
    "text": "Using specific parts of a date\n\nWhich month had the most episodes (throughout the entire period)?\nTo answer this question, we can use Lubridate‚Äôs month() function, which allows us to focus only on months (while ignoring years). It works like this:\n\n\n\n\n\n\n\n\nHere, we‚Äôre creating a new dataframe called rebels_cl_newcols. We‚Äôll use this to add more columns later on.\nIt‚Äôs worth keeping in mind that ‚Äúmonth‚Äù is now the name of a column (which we just created) and the name of a function from the lubridate package. That can be a bit confusing and it‚Äôs generally best to avoid creating object with the same names as functions.\nAlso, see how the newly created month column only has information about which month the episodes aired in, in this case ‚Äú10‚Äù (October) for the first three observations and ‚Äú11‚Äù (November) for the next four observations. If we wanted the names of the months, we can use the label = TRUE argument within the month function. Like this:\n\n\n\n\n\n\n\n\nNotice that the type for month is ‚Äúord‚Äù? This means that the column is written as an ‚Äúordered factor‚Äù, which simply means (in this case) that although it looks like text, it would be ordered by time, not alphabetically. In other words, we can sort by the month column, if we want to do so:\n\n\n\n\n\n\n\n\nSee how it‚Äôs arranged by month?\nGoing back to our question about which month had the most episodes, let‚Äôs take a look:\n\n\n\n\n\n\n\n\nIt looks like there were lot‚Äôs of new episodes in October, November, February, and March.\nAs a quick aside, when we do the month labels, we can also get R to write out the full month rather than the abbreviation. Let‚Äôs look at an example:\n\n\n\n\n\n\n\n\nThe abbr argument defaults to TRUE, so if we don‚Äôt specific abbr = FALSE, we‚Äôd get the abbreviated version as we saw above.\n\nPadawan practice: using the year() function\nTo get information about specific years, we can use the year() function, which is quite similar. Try to create a variable called year see we can check how many episodes aired in each year.\nHint: you‚Äôll need to use the air_date_fixed column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFloor_date()\nAn alternative would be to use Lubridate‚Äôs floor_date()-function, which let‚Äôs us round date-time objects down to their nearest year, month, week, day, etc. It works like this:\n\n\n\n\n\n\n\n\nNotice that the new column, month_floor, only include dates that are the first day in any given month?\nRounding the dates to their nearest year/month/week/day/etc can be helpful later on, for example when visualizing the data. Instead of round to the nearest values, we can use ceiling_date() to round up to the nearest value or round_date() to round to the closest value. In this tutorial we‚Äôll mostly focus on floor_date() but as a future JedR Master, you should know about the other options, too!\nOkay, let‚Äôs create a dataframe with four new columns, rounded by floor_date(). We‚Äôll use this later on.\n\n\n\n\n\n\n\n\n\n\nThe yday() function\nWhat if we wanted to find the earliest date within a year that an episode aired? For that purpose, we could use the yday() (year day) function, which simply tells us how many days into a year a given date is. My son and I share the same birthday (February 5). That‚Äôs the 36th day of the year:\n\n\n\n\n\n\n\n\nTo find the earliest episode airdate for each year, we could do this:\n\n\n\n\n\n\n\n\nThis shows the first-aired episode for each of the years from 2014‚Äì2018. Notice the few doppelg√§ngers? It looks like seasons 3 and 4 started each started with a double episode.\nThere are few things going on in the chunk above. Here‚Äôs a quick recap of what each line does:\n\nWe start with our object, rebels_rounded_cols, and then ‚Ä¶\nWe use mutate() to create a new column called dy ‚Ä¶\nTo get the dy column to specify each dates number within a year, we use yday(), and then ‚Ä¶\nWe group_by() because we want the earliest episode within each year, and then ‚Ä¶\nWe use slice_min() to get just the earliest episode within each year. (Otherwise, our output would all the episodes.) And then ‚Ä¶\nWe use ungroup() to remove the grouped dy column. Not essential here but might be handy if you need to perform additional operations. And then ‚Ä¶\nselect() let‚Äôs us show just a few columns to make the output more readable at a glance."
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#plotting-with-dates",
    "href": "webr-trainings/jedr-manage-dates.html#plotting-with-dates",
    "title": "JedR: Managing dates",
    "section": "Plotting with dates",
    "text": "Plotting with dates\nWhen working with dates it can be super useful to plot your date. This can show how things are changing over time. Let‚Äôs look at a quick example. Remember above where we used floor_date() to round all dates down to their nearest month? We can use that column to plot how many episodes that aired per month throughout the entire period.\nFirst, let‚Äôs get the data into a more handy format.\n\n\n\n\n\n\n\n\nA quick rundown of what‚Äôs happening above:\n\nWe‚Äôre grouping by month_fl.¬†This is because we‚Äôre interested in the number of episodes per month. We could also have used year_fl, week_fl, or day_fl here.\nThen we‚Äôre using the summarise function to simply count the number of episodes per month.\nWe‚Äôre storing this in a new dataframe, rebels_gs, which we‚Äôll use below.\n\nWith that taken care of, here‚Äôs an example of how we could use ggplot to visualize it:\n\n\n\n\n\n\n\n\nHere‚Äôs a quick explanation of what‚Äôs happening in the chunk above:\n\nIn the first line, we‚Äôre specifying the dataset (‚Äúrebels_gs‚Äù, x-variable (‚Äúmonth_fl‚Äù), and y-variable (‚Äúno_episodes‚Äù)\nIn the second line, we‚Äôre using geom_bar() to tell R to make a bar chart. We use the ‚Äústat = ‚Äòidentity‚Äô‚Äù arugment to clarify that we‚Äôll be providing the values for the bars\nIn the third portion, we‚Äôre using labs() to create the title and caption. We‚Äôre using ‚Äúsubtitle‚Äù rather than ‚Äútitle‚Äù b/c it works better with the theme we‚Äôre using\nIn the fourth and final portion, we‚Äôre employing theme_fivethirtyeight() from the ggthemes package."
  },
  {
    "objectID": "webr-trainings/jedr-manage-dates.html#the-end",
    "href": "webr-trainings/jedr-manage-dates.html#the-end",
    "title": "JedR: Managing dates",
    "section": "The end",
    "text": "The end\nThat‚Äôs it for now, young Padawan! Good luck on your next quest, stay safe, and may the force be with you! üí™"
  },
  {
    "objectID": "resources/data-info.html",
    "href": "resources/data-info.html",
    "title": "Data Information",
    "section": "",
    "text": "While we strive to use the starwars data as much as possible, we‚Äôve had to introduce other Star Wars related data in some situations.\nAll data is in the data/ folder except starwars which is utilized from tidyverse.\n\nstarwars characters data that is part of the tidyverse. It‚Äôs our main data set. Small enough to wrap your head around; complex and dirty enough to provide good examples.\nstarwarsrebels is a list of episodes of Star Wars Rebels from tvmaze.com\n\n\nOther possible data sources\nThese might be explored later.\n\nSWAPI\nStar Wars Databank\nWe‚Äôve pulled some data from Kaggle, which notes ‚ÄúThis data was gathered using the Star Wars API that is no longer available. The origin of the data is The Star Wars Wiki.‚Äù\n\ncharacters\nplanets\nspecies\nstarships\nvehicles\n\nFound some additional data on data.world that yielded a couple new sets:\n\nsurvey (done from Five Thirty Eight, apparently)\nprinciples\nsoundtracks\nrt_ratings\nimdb_ratings"
  }
]