---
title: " JedR Trial No. 1: Introduction"
engine: knitr
format: live-html
webr:
  packages:
    - tidyverse
    - dplyr
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

Congratulations! You have recently been hired as a **data jedi** for the *Galactic News Hub*, the premiere news organization for the Star Wars Universe. Your first task: apply beginning `tidyverse` skills to learn about the characters in the Star Wars universe you'll be reporting on.

### 1. Previewing our data

For this exercise, we will use the data collection called `starwars`. This data comes with the `tidyverse` package, so if you have loaded `tidyverse` into your R environment using `library()`, the `starwars` data should be there! As you can see below, `starwars` contains some information about Star Wars characters, like their name and height.

Let's learn a bit more about the structure of the `starwars` data and how to conquer these JedR Trials.

This is what it looks like when we load the `tidyverse` library and look at the first few lines in the `starwars` data. Each row of the data is a character within the Star Wars franchise:

```{r}
#| message: false
library(tidyverse)

starwars |> 
  head()
```

Within the JedR Trails, you can enter and run code right inside this page. Since the tidyverse was loaded above, all the functions you would normally see in RStudio are available in this interactive. Once you enter the code, click the blue **Run Code** button to see the results, and then once you think you have the correct code, click the **Submit Answer** to pass the test.

The first thing you need to learn is how many rows are in the `starwars` data, along with all the columns and datatypes.

What function would you add to the starwars data here to *glimpse* the data and find those answers?

```{webr}
#| exercise: ex_1
______(starwars)

```

::: {.solution exercise="ex_1"}

#### Solution

Use the `glimpse()` function from the `{dplyr}` package.

```{webr}
#| exercise: ex_1
#| solution: true
glimpse(starwars)
```

```{webr}
#| exercise: ex_1
#| check: true

grade_this({
if (identical(.result, .solution)) {
  pass(message = "Wow! The force is with you!")
} else {
  fail(message = "The wrong answer it is, young Padawan.")
}})

```
:::

::: {.hint exercise="ex_1"}
::: {.callout-note collapse="false"}
## Hint 1

Check out the `glimpse()` function. You can [learn more here](https://dplyr.tidyverse.org/reference/glimpse.html).

:::
:::

Just as you submitted the answer, your humanoid robot editor (J-327D) pops into your office and asks you how many people (characters) are in your data. What is your answer?

```{webr}
#| exercise: ex_2
______
```

::: {.solution exercise="ex_2"}

#### Solution

```{webr}
#| exercise: ex_2
#| solution: true
87
```

```{webr}
#| exercise: ex_2
#| check: true

grade_this({
if (identical(.result, .solution)) {
  pass(message = "Wow! The force is with you!")
} else {
  fail(message = "The wrong answer it is, young Padawan.")
}})

```
:::

::: {.hint exercise="ex_2"}
::: {.callout-note collapse="false"}
## Hint 1

Check out the `rows`` from the previous question.

:::
:::

### 2. Focusing on variables

Now that we know how to *glimpse* into our data, let's work on *select*ing specific variables of interest. Let's say the *Galactic News Hub* has asked you to write a story about height differences across different species. What function would you use to *select* only the following variables in `starwars`: `name`, `height`, `homeworld`, and `species`?

```{webr}
#| exercise: ex_3
______
```

::: {.solution exercise="ex_3"}

#### Solution

```{webr}
#| exercise: ex_3
#| solution: true
starwars |>
  select(name, height, homeworld, species)
```

```{webr}
#| exercise: ex_3
#| check: true

grade_this({
if (identical(.result, .solution)) {
  pass(message = "Wow! The force is with you!")
} else {
  fail(message = "The wrong answer it is, young Padawan.")
}})

```
:::

::: {.hint exercise="ex_3"}
::: {.callout-note collapse="false"}
## Hint 1

You might look into the `select()` function, you can [learn about here](https://dplyr.tidyverse.org/reference/select.html).

:::
:::

### 3. Arranging our Data {data-progressive=FALSE}

```{r arrangeexercise-setup, include=FALSE}
starwars <- starwars %>%
  select(name, height, homeworld, species)
```

Now that we have *glimpse*d our data and *select*ed our variables in the `starwars`, let's *arrange* them using by height. What function would we add to our code below to *arrange* our data so that the tallest person is listed at the top? (Hint: since `tidyverse` *arrange*s numbers from the smallest to the greatest number, you may need another function so the information is in *desc*ending order.)

```{webr}
#| exercise: ex_4
starwars |>
  select(name, height, homeworld,species)
```

::: {.solution exercise="ex_4"}

#### Solution

```{webr}
#| exercise: ex_4
#| solution: true
starwars |>
  select(name, height, homeworld,species) |>
  arrange(height |> desc())
```

```{webr}
#| exercise: ex_4
#| check: true

grade_this({
if (identical(.result, .solution)) {
  pass(message = "Wow! The force is with you!")
} else {
  fail(message = "The wrong answer it is, young Padawan.")
}})

```
:::

::: {.hint exercise="ex_4"}
::: {.callout-note collapse="false"}
## Hint 1

I recommend checking out the `arrange()` function, you can [learn about here](https://dplyr.tidyverse.org/reference/arrange.html). Don't forget to put your result in **desc**ending order.

:::
:::

So many tall characters! If your humanoid robot editor (J-327D) wanted you to write a story about the tallest character in the data, who would that be?

```{webr}
#| exercise: ex_5
_____
```

::: {.solution exercise="ex_5"}

#### Solution

```{webr}
#| exercise: ex_5
#| solution: true
"Yarael Poof"
```

```{webr}
#| exercise: ex_5
#| check: true

grade_this({
if (identical(.result, .solution)) {
  pass(message = "Wow! The force is with you!")
} else {
  fail(message = "The wrong answer it is, young Padawan.")
}})

```
:::

::: {.hint exercise="ex_5"}
::: {.callout-note collapse="false"}
## Hint 1

Look at the result of previous code chunk

:::
:::

Great job! Please inform your JedR Master that you have completed this exercise.